#!/bin/sh
# SafeRun pre-push hook
# Protects against dangerous AI agent operations

REMOTE_NAME="$1"
REMOTE_URL="$2"
shift 2 >/dev/null 2>&1 || true

# Allow bypass for CI or explicit disable flag
if [ "$SAFERUN_DISABLE" = "1" ] || [ "$CI" = "true" ] || [ "$CI" = "1" ]; then
  exit 0
fi

# Expand PATH to handle edge cases (osascript, minimal shells, etc.)
export PATH="/usr/local/bin:/opt/homebrew/bin:/usr/bin:/bin:$HOME/.nvm/versions/node/current/bin:$HOME/.npm-global/bin:$PATH"

# Check if npx is available
if ! command -v npx >/dev/null 2>&1; then
  echo "⚠️  SafeRun: npx not found. Install Node.js or ensure it's in PATH."
  echo "Bypassing SafeRun protection for this operation..."
  exit 0  # graceful degradation
fi

read_input() {
  if [ -t 0 ]; then
    return 1
  fi
  while read LOCAL_REF LOCAL_SHA REMOTE_REF REMOTE_SHA
  do
    SAFERUN_REMOTE_NAME="$REMOTE_NAME" \
    SAFERUN_REMOTE_URL="$REMOTE_URL" \
    npx --no saferun-hook pre-push "$LOCAL_REF" "$LOCAL_SHA" "$REMOTE_REF" "$REMOTE_SHA" "$REMOTE_NAME" "$REMOTE_URL"
    STATUS=$?
    if [ $STATUS -ne 0 ]; then
      exit $STATUS
    fi
  done
  return 0
}

if ! read_input; then
  # No refs provided; still invoke hook once for safety
  SAFERUN_REMOTE_NAME="$REMOTE_NAME" \
  SAFERUN_REMOTE_URL="$REMOTE_URL" \
  npx --no saferun-hook pre-push "" "" "" "" "$REMOTE_NAME" "$REMOTE_URL"
  exit $?
fi

exit 0
